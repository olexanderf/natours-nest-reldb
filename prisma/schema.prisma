// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  key_id               String?   @unique
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  photo                String?   @default("default.jpg")
  role                 Role      @default(USER)
  password             String
  passwordChangedAt    DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  active               Boolean   @default(true)

  reviews Review[]
  tours   GuidesOfTour[]

  @@map("users")
}

enum Role {
  USER
  GUIDE
  LEADGUIDE
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  DIFFICULT
}

model Tour {
  id              Int        @id @default(autoincrement())
  key_id          String?    @unique
  name            String     @unique
  slug            String?
  duration        Int
  maxGroupSize    Int
  difficulty      Difficulty
  ratingsAverage  Float      @default(4.5)
  ratingsQuantity Int        @default(0)
  price           Int
  priceDiscount   Int?
  summary         String
  description     String
  imageCover      String
  images          String[]
  createdAt       DateTime   @default(now())
  startDates      DateTime[]
  startLocation   Json
  locations       Json

  Review Review[]
  guides GuidesOfTour[]

  @@map("tours")
}

model GuidesOfTour {
  guide      User   @relation(fields: [guideEmail], references: [email])
  guideEmail String
  tour       Tour   @relation(fields: [tourName], references: [name])
  tourName   String

  @@id([guideEmail, tourName])
}

model Review {
  id        Int      @id @default(autoincrement())
  key_id    String?  @unique
  review    String
  rating    Int
  createdAt DateTime @default(now())

  authorEmail String
  tourName    String

  user User @relation(fields: [authorEmail], references: [email])
  tour Tour @relation(fields: [tourName], references: [name])

  @@map("reviews")
}
